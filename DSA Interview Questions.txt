Output
-------------
let a=10;
let b= ++a;
let c= a++;
console.log(a,b,c)
 12 11 11

WAP to find the factorila of a number
----------------------------------------

factorila of a number- it is the product of one to the number itself and we represent in n!
 
let num =Number(window.prompt('Please enter a number to find the factorial of a it')); //5

if(num>0){ //5>0
  let fact=1; //fact=1
  for(let i=1; i<=num;i++){


    fact = fact *i;  //fact =120 i=6
  }

  console.log("The factorial of number "+ num +" is "+fact);
} else if(num == 0){
  console.log("The factorial of number "+ num +" is "+1);
} else{
  console.log('you have enterd a negative value')
}

WAP to check if a number is palindrom or not
-------------------------------------------------------
let originalNumber =Number(window.prompt('Please enter a number to find the factorial of a it')); //5
let num = originalNumber; //121 
let sum =0;
while(num>0){
let rem = num%10; //1
num = parseInt(num/10); //0
sum = sum*10+rem;  // 1  ,   121
}

if(sum == originalNumber){
  console.log('it is a palindrom numer');
}else{
  console.log('it is not a palindrom number');
}


WAP to find a number string or not
---------------------------------------
145 sum of factorial of all 3 digits is equal to the same number is a strong number.
  var OriginalNumber=Number(window.prompt('enter a number to check if it is strong'));
  var num = OriginalNumber;

    var sum=0;
  while(num>0){
    var fact=1;
    let lastnum = num%10;
    for(let i=1;i<=lastnum;i++){
      fact = fact*i;
    }
    sum =sum+fact;
    num =parseInt(num/10);
  }
  if(sum == OriginalNumber){
    console.log('it is a strong number')
  }
  else{
    console.log('it is not a strong number')
  }

Pattern programme
----------------------
******

*****
*****
*****
*****
*****

*
**
***
****
*****

   *
  * *
 * * *
* * * *


******
*****
****
***
**
*

55555
4444
333
22
1

1
22
333
4444
55555

1
12
123
1234
12345

12345
1234
123
12
1

54321
4321
321
21
1

Wite a programme to reverse a string
----------------------------------------
var string1='Sugandha';
var reverseString = string1.split('').reverse().join('');

write a programm to reverse words
-----------------------------------
var string1='Sugandha is a nice girl';
var reverseString = string1.split(' ').reverse().join(' ');




Write a programme in array to sort the +ve numbers in an array
------------------------------------------------------------------
https://learnersbucket.com/examples/algorithms/program-to-sort-only-positive-numbers-of-the-array/

WAP to remove all the duplicate name object
-----------------------------------------------
    var array = [
      {
        "name": "Shema",
        "count": 1,
      },
      {
        "name": "Hero",
        "count": 1,
      },
      {
        "name": "PVPL",
        "count": 4,
      },
      {
        "name": "Omega",
        "count": 8,
      },
      {
        "name": "Hero",
        "count": 1,
      },
      {
        "name": "Omega",
        "count": 8,
      },
      {
       "name": "Shema",
        "count": 1,
      },
      {
        "name": "Shema",
        "count": 1,
      },
      {
        "name": "Hero",
        "count": 1,
      }
   ]
const key ='name';
    const arrayUniqueByKey = [...new Map(array.map(item =>
  [item[key], item])).values()];
  console.log(arrayUniqueByKey)
  console.log(array);



Array Questions
Basic Level
Find the largest element in an array.
---------------------------------------------
let arr = [5, 8, 6, 45, 98, 52, 41, 8];

function findLargestArrayEle(arr) {
    // Initialize largest with the first element.
    // This is safer than 0 in case all numbers are negative.
    let largest = arr[0];

    // Start the loop from the second element (i = 1)
    for (let i = 1; i < arr.length; i++) {
        // Simply compare and update
        if (arr[i] > largest) {
            largest = arr[i];
        }
    }
    return largest;
}

console.log(findLargestArrayEle(arr)); // Output: 98

Find the second largest element in the array
-----------------------------------------------

Find the smallest element in an array.

Find the sum of all elements in an array.

Find the average of all elements in an array.

Reverse an array (without using the built-in .reverse() method).

Check if an array is a palindrome (reads the same forwards and backwards).

Remove duplicates from an array.

Merge two sorted arrays into one sorted array.

Find the index of a specific element in an array (manual implementation of indexOf).

Find the second largest element in an array.

Intermediate Level
Find all pairs of elements in an array that sum up to a specific target (Two Sum problem).

Find the missing number in an array of 1 to N.

Move all zeros to the end of the array while maintaining the order of other elements.

Find the intersection of two arrays (common elements).

Rotate an array to the right by k steps.

Chunk an array into smaller arrays of a specified size.

Example: chunk([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]]

Flatten a nested array (manual implementation, handle 1 level or multiple levels recursively).

Example: flatten([1, [2, [3, [4]], 5]]) -> [1, 2, 3, 4, 5]

Find the majority element in an array (element that appears more than n/2 times).

Advanced Level (Algorithmic)
Implement your own version of common array methods:

myMap, myFilter, myReduce, myForEach

Kadane's Algorithm: Find the maximum sum of a contiguous subarray.

Merge Intervals: Merge all overlapping intervals in an array of [start, end] pairs.

Product of Array Except Self: Return an array where each element output[i] is equal to the product of all elements of the original array except nums[i] (without using division).

Find the "Kth" largest element in an unsorted array.

Trapping Rain Water: Calculate how much rainwater can be trapped between bars represented by an array of heights.

String Questions
Basic Level
Reverse a string (without using the built-in .reverse() method).

Check if a string is a palindrome (ignoring case and non-alphanumeric characters).

Count the number of vowels in a string.

Count the number of words in a string.

Capitalize the first letter of each word in a sentence.

Check if two strings are anagrams of each other (contain the same characters in the same frequency).

Find the most frequent character in a string.

Truncate a string if it is longer than the given maximum length, adding "..." at the end.

Check if a string is a valid email address (basic version using regex or string methods).

Convert a string to title case (Every Word Capitalized).

Intermediate Level
Find the longest word in a sentence.

Check for balanced parentheses in a string using a stack. (){}[]

Implement a function to compress a string (Basic Run-Length Encoding).

Example: "aabbbcc" -> "a2b3c2"

Longest Substring Without Repeating Characters (Sliding Window technique).

Group Anagrams: Given an array of strings, group the anagrams together.

Valid Palindrome II: Given a string, determine if it can become a palindrome by removing at most one character.

Implement strStr(): Return the index of the first occurrence of a substring (needle) in another string (haystack), or -1 if not found.

Advanced Level (Algorithmic)
Longest Palindromic Substring in a given string.

Longest Common Prefix amongst an array of strings.

Minimum Window Substring: Find the smallest substring in s that contains all characters of another string t.

Decode a string following a specific pattern. Example: "3[a]2[bc]" -> "aaabcbc".

Zigzag Conversion: Convert a string into a zigzag pattern and read it line by line.

Find All Anagrams in a String: Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Mixed Array & String Questions
Rotate a matrix (2D array) by 90 degrees.

Spiral Traversal of a matrix (2D array).

Find the first non-repeating character in a string.

Check if one string is a rotation of another (e.g., "waterbottle" is a rotation of "erbottlewat").

Implement a basic string compression function and compare the length to the original.

URLify a string: Replace all spaces in a string with '%20'.

Is Subsequence: Check if string s is a subsequence of string t.


