Function Currying
------------------
Function Currying is a functional programming technique where a function with multiple arguments is transformed into a sequence of functions, each taking a single argument.

function add(a, b, c) {
    return a + b + c;
}
add(1, 2, 3); // Returns 6

function printLog(type){
return function(message){
console.log(type+"  "+message)
}
}

const error=printLog('error')

error('Api error');
error('Velidation message error')

const imfo=printLog('imfo');
imfo('page saved')

//it s used for reusability where ever we need error and imfo we can use this


Functional Programming (FP) is a programming paradigm that treats computation as the evaluation of mathematical functions and avoids changing state and mutable data. It's a declarative approach rather than imperative.


Core Concepts of Functional Programming:
1. Pure Functions
Same input always gives same output

No side effects (doesn't modify external state)

// Pure function
function add(a, b) {
    return a + b;
}

// Impure function (has side effect)
let total = 0;
function impureAdd(a) {
    total += a; // Modifies external state
    return total;
}



2. Immutability
Data cannot be changed after creation

Instead of modifying, create new data

// Mutable (imperative)
const numbers = [1, 2, 3];
numbers.push(4); // Modifies original array

// Immutable (functional)
const numbers = [1, 2, 3];
const newNumbers = [...numbers, 4]; // Creates new array



3. First-Class and Higher-Order Functions
Functions are treated like any other value

Functions can be passed as arguments, returned from functions

// Higher-order function
function map(array, transform) {
    const result = [];
    for (let item of array) {
        result.push(transform(item));
    }
    return result;
}

// Using it
const numbers = [1, 2, 3];
const doubled = map(numbers, x => x * 2);
